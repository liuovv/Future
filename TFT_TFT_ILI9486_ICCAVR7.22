/*  www.cmmhome.com   */

#include "sys.h"
#include "font.h" 
//#include "Pic_QQ.h" 
#include "ico.h" 

#define USE_HORIZONTAL  	1   //定义液晶屏顺时针旋转方向 	0-0度旋转，1-90度旋转，2-180度旋转，3-270度旋转
#define LCD_USE8BIT_MODEL   1  	//定义数据总线是否使用8位模式 0,使用16位模式.1,使用8位模式
#define LCD_W 320             	//定义LCD的尺寸
#define LCD_H 480
#define WHITE         	 0xFFFF    /*画笔颜色 */
#define BLACK         	 0x0000	  
#define BLUE         	 0x001F  
#define BRED             0XF81F
#define GRED 			 0XFFE0
#define GBLUE			 0X07FF
#define RED           	 0xF800
#define MAGENTA       	 0xF81F
#define GREEN         	 0x07E0
#define CYAN          	 0x7FFF
#define YELLOW        	 0xFFE0
#define BROWN 			 0XBC40 //棕色
#define BRRED 			 0XFC07 //棕红色
#define GRAY  			 0X8430 //灰色     //GUI颜色
#define DARKBLUE      	 0X01CF	//深蓝色
#define LIGHTBLUE      	 0X7D7C	//浅蓝色   
#define GRAYBLUE       	 0X5458 //灰蓝色  //以上三色为PANEL的颜色 
#define LIGHTGREEN     	 0X841F //浅绿色
#define LGRAY 			 0XC618 //浅灰色(PANNEL),窗体背景色
#define LGRAYBLUE        0XA651 //浅灰蓝色(中间层颜色)
#define LBBLUE           0X2B12 //浅棕蓝色(选择条目的反色)

#define PORTRAIT       0x48
#define LANDSCAPE      0x28
#define PORTRAIT_REV   0x98
#define LANDSCAPE_REV  0xF4

#define TFT_NOP     0x00  /*SCREEN COMMAND*/
#define TFT_SWRST   0x01
#define TFT_CASET   0x2A
#define TFT_PASET   0x2B
#define TFT_RAMWR   0x2C
#define TFT_RAMRD   0x2E
#define TFT_MADCTL  0x36
#define TFT_MAD_MY  0x80
#define TFT_MAD_MX  0x40
#define TFT_MAD_MV  0x20
#define TFT_MAD_ML  0x10
#define TFT_MAD_BGR 0x08
#define TFT_MAD_MH  0x04
#define TFT_MAD_SS  0x02
#define TFT_MAD_GS  0x01
#define TFT_MAD_RGB 0x00
#define TFT_INVOFF  0x20
#define TFT_INVON   0x21

/********************读控制*****************UNO-->A0************/
#define LCD_RD_L	PORTC &= ~(1 << PC0)  
#define LCD_RD_H	PORTC |= (1 << PC0)   
/********************写控制*****************UNO-->A1*************/
#define LCD_WR_L	PORTC &= ~(1 << PC1)  
#define LCD_WR_H	PORTC |= (1 << PC1)   
/********************数据/命令切换**********UNO-->A2************/
#define LCD_RS_L	PORTC &= ~(1 << PC2)   
#define LCD_RS_H	PORTC |= (1 << PC2)    
/********************片选*******************UNO-->A3************/
#define LCD_CS_L	PORTC &= ~(1 << PC3)  
#define LCD_CS_H	PORTC |= (1 << PC3)
/********************复位*******************UNO-->A4************/
#define LCD_RESET_L	PORTC &= ~(1 << PC4)  
#define LCD_RESET_H	PORTC |= (1 << PC4)

/********************LED*******************UNO-->A5************/
#define LED_L	PORTC &= ~(1 << PC5)  
#define LED_H	PORTC |= (1 << PC5)

#define Set_Bit(val, bitn)    (val |=(1<<(bitn))) 
#define Clr_Bit(val, bitn)    (val&=~(1<<(bitn))) 
#define Get_Bit(val, bitn)    (val &(1<<(bitn)))

// LCD control lines:RD (read), WR (write), CD (command/data), CS (chip select)
#define RD_PORT PORTC				/*pin A0 */
#define WR_PORT PORTC				/*pin A1 */
#define CD_PORT PORTC				/*pin A2 */
#define CS_PORT PORTC				/*pin A3 */
#define RD_MASK B00000001
#define WR_MASK B00000010
#define CD_MASK B00000100
#define CS_MASK B00001000

#define BMASK    0x03     // Aduino Uno board
#define DMASK    0xFC 

#define SetWriteDir() {DDRD|=DMASK; DDRB |=BMASK;}
#define SetReadDir() {DDRD&=~DMASK; DDRB &=~BMASK;}

u16 POINT_COLOR=0x0000;	//画笔颜色   //LCD的画笔颜色和背景色	
u16 BACK_COLOR= 0xFFFF;  //背景色 

typedef struct   //LCD重要参数集
{										    
	u16 width;			//LCD 宽度
	u16 height;			//LCD 高度
	u16 id;				//LCD ID
	u8  dir;			//横屏还是竖屏控制：0，竖屏；1，横屏。	
	u16	 wramcmd;		//开始写gram指令
	u16  rramcmd;       //开始读gram指令
	u16  setxcmd;		//设置x坐标指令
	u16  setycmd;		//设置y坐标指令	 
}_lcd_dev; 	
_lcd_dev lcddev;	//管理LCD重要参数 

u16 ColorTab[5]={RED,GREEN,BLUE,YELLOW,BRED};          //定义颜色数组  variable
u16 ColornTab[8]={RED,MAGENTA,GREEN,DARKBLUE,BLUE,BLACK,LIGHTGREEN};

/***********************写8位数据到LCD屏************************/
void LCD_write(u8 Data)     
{
    LCD_CS_L;
	LCD_WR_L;  //LCD_WR = 0;
    PORTD = (PORTD & ~DMASK) | ((Data) & DMASK); 
    PORTB = (PORTB & ~BMASK) | ((Data) & BMASK); 
	LCD_WR_H;  //LCD_WR = 1;
	LCD_CS_H;
}
/***************LCD读8bit数据*****************/
u8 LCD_read(void)
{
    unsigned char dst;
	SetReadDir();
	LCD_CS_L; 
	LCD_RD_L;     //RD_ACTIVE;
	delay_us(1);  //delay 1 us
	dst = (PIND & DMASK) | (PINB & BMASK);
	LCD_RD_H;
	LCD_CS_H;
	SetReadDir();
	return dst;
}
/************************写8位数据到LCD屏**************************/
void LCD_WR_DATA(u8 Data)
{ 
	LCD_CS_L;
	LCD_RS_H;     //LCD_RS=1; DATA
    LCD_write(Data);
	LCD_CS_H; 
}

/*************************写8位命令到LCD屏************************/
void LCD_WR_REG(u8 Reg)	 
{	
    LCD_CS_L;
	LCD_RS_L;       //LCD_RS=0; COMMAND
    LCD_write(Reg); 
	LCD_CS_H;
} 

/*************************写16位命令到LCD屏************************/
void LCD_WR_REG_16Bit(u16 Reg)	 
{	
  unsigned char H=(Reg)>>8, L = Reg&0xff;
    LCD_CS_L;
	LCD_RS_L;       //LCD_RS=0; COMMAND
	LCD_write(H);
	LCD_write(L);
	LCD_CS_H;
}

/****************************写16bit数据到LCD屏************************/
void LCD_WR_DATA_16Bit(u16 Data)
{
   unsigned char H=(Data)>>8, L = Data&0xff;
    LCD_CS_L; 
	LCD_RS_H;  //LCD_RS=1; DATA
	LCD_write(H);
	LCD_write(L);
	LCD_CS_H;
}

/***************LCD读8bit数据*****************/
u16 LCD_RD_DATA(void)
{
	LCD_RS_H; 
	return (LCD_read()>>8);
}

/*****************************************************************************
 * @name       :void LCD_WriteReg(u16 LCD_Reg, u16 LCD_RegValue)
 * @function   :Write data into registers               数据写入LCD寄存器
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written       Ruifeng  2020-3-21  OK
******************************************************************************/
void LCD_WriteReg(u16 LCD_Reg, u16 LCD_RegValue)
{
    LCD_WR_REG(LCD_Reg);
	LCD_WR_DATA(LCD_RegValue);
}

/*****************************************************************************
 * @name       :void LCD_WriteRAM_Prepare(void)   写RAM数据准备
 * @function   :Write GRAM                        Ruifeng  2020-3-21  OK
******************************************************************************/	
void LCD_WriteRAM_Prepare(void)
{
 	LCD_WR_REG(lcddev.wramcmd);	  
}

/*****************************************************************************
 * @name       :void LCD_ReadRAM_Prepare(void)   读取RAM数据准备
 * @function   :Read GRAM                        Ruifeng  2020-3-21  OK
******************************************************************************/	 
void LCD_ReadRAM_Prepare(void)
{
	LCD_WR_REG(lcddev.rramcmd);
}

/*****************************************************************************
 * @name       :void LCD_Clear(u16 Color)
 * @function   :Full screen filled LCD screen  全屏液晶显示清屏
 * @parameters :color:Filled color
******************************************************************************/	
void LCD_Clear(u16 Color)
{
	u16 i,j;
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);	
	LCD_WR_REG(TFT_RAMWR);
    for(i=0;i<lcddev.width;i++)
	 {
	  for (j=0;j<lcddev.height;j++)
	   {
         LCD_WR_DATA_16Bit(Color);
	   }
	  }
}

/*****************************************************************************
 * @name       :void LCD_DrawPoint(u16 x,u16 y)
 * @function   :Write a pixel data at a specified location
 * @parameters :x:the x coordinate of the pixel    写入指定位置绘制像素数据 
                y:the y coordinate of the pixel    
******************************************************************************/	
void LCD_DrawPoint(u16 x,u16 y)
{
	LCD_SetWindows(x,y,x,y);  //设置光标位置 
	LCD_WR_DATA_16Bit(POINT_COLOR); 	    
} 	 

/*****************************************************************************
 * @name       :void LCD_Set_GPIO(void)
 * @function   :Set the gpio to push-pull mode      Ruifeng  2020-3-21  OK
******************************************************************************/	
void LCD_Set_GPIO(void)
{
   //LCD_DATA = PB0-PB1-PD2-PD3-PD4-PD5-PD6-PD7
   PORTB = 0xFF; 
   DDRB  = 0x03;  //PB1 PB0
   
   PORTC = 0xFF;
   DDRC  = 0x3F;  //PC4 PC3 PC2 PC1 PC0
   
   PORTD = 0xFF;  
   DDRD  = 0xFC;  //PD7 PD6 PD5 PD4 PD3 PD2
}

/*****************************************************************************
 * @name       :void LCD_Reset(void)
 * @function   :Reset LCD screen  重置LCD显示屏      Ruifeng   2020-3-21   OK
******************************************************************************/	
void LCD_Reset(void)
{
    LCD_CS_H;
    LCD_RD_H;
	LCD_WR_H;
	LCD_RESET_H;     //LCD_RESET=1;
    delay_ms(50);
	LCD_RESET_L;     //LCD_RESET=0;
	delay_ms(100);
	LCD_RESET_H;     //LCD_RESET=1;
	delay_ms(100);
}

/*****************************************************************************
 * @name       :void LCD_Init(void)
 * @function   :Initialization LCD screen  初始化LCD
******************************************************************************/	 	 
void LCD_Init(void)
{
	LCD_Set_GPIO(); 
	LCD_Reset(); //初始化之前复位
	
	LCD_WR_REG(0XF1);    /*ILI9486初始化*/
	LCD_WR_DATA(0x36);
	LCD_WR_DATA(0x04);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x3C);
	LCD_WR_DATA(0X0F);
	LCD_WR_DATA(0x8F);
	LCD_WR_REG(0XF2);
	LCD_WR_DATA(0x18);
	LCD_WR_DATA(0xA3);
	LCD_WR_DATA(0x12);
	LCD_WR_DATA(0x02);
	LCD_WR_DATA(0XB2);
	LCD_WR_DATA(0x12);
	LCD_WR_DATA(0xFF);
	LCD_WR_DATA(0x10);
	LCD_WR_DATA(0x00);
	LCD_WR_REG(0XF8);
	LCD_WR_DATA(0x21);
	LCD_WR_DATA(0x04);
	LCD_WR_REG(0XF9);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x08);
	LCD_WR_REG(0x36);
	LCD_WR_DATA(0x08);
	LCD_WR_REG(0xB4);
	LCD_WR_DATA(0x00);
	LCD_WR_REG(0xC1);
	LCD_WR_DATA(0x41);
	LCD_WR_REG(0xC5);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x91);
	LCD_WR_DATA(0x80);
	LCD_WR_DATA(0x00);
	LCD_WR_REG(0xE0);
	LCD_WR_DATA(0x0F);
	LCD_WR_DATA(0x1F);
	LCD_WR_DATA(0x1C);
	LCD_WR_DATA(0x0C);
	LCD_WR_DATA(0x0F);
	LCD_WR_DATA(0x08);
	LCD_WR_DATA(0x48);
	LCD_WR_DATA(0x98);
	LCD_WR_DATA(0x37);
	LCD_WR_DATA(0x0A);
	LCD_WR_DATA(0x13);
	LCD_WR_DATA(0x04);
	LCD_WR_DATA(0x11);
	LCD_WR_DATA(0x0D);
	LCD_WR_DATA(0x00);
	LCD_WR_REG(0xE1);
	LCD_WR_DATA(0x0F);
	LCD_WR_DATA(0x32);
	LCD_WR_DATA(0x2E);
	LCD_WR_DATA(0x0B);
	LCD_WR_DATA(0x0D);
	LCD_WR_DATA(0x05);
	LCD_WR_DATA(0x47);
	LCD_WR_DATA(0x75);
	LCD_WR_DATA(0x37);
	LCD_WR_DATA(0x06);
	LCD_WR_DATA(0x10);
	LCD_WR_DATA(0x03);
	LCD_WR_DATA(0x24);
	LCD_WR_DATA(0x20);
	LCD_WR_DATA(0x00);
	LCD_WR_REG(0x3A);
	LCD_WR_DATA(0x55);
	LCD_WR_REG(0x11);
	LCD_WR_REG(0x36);
	LCD_WR_DATA(0x28);
	delay_ms(120);
	LCD_WR_REG(0x29);
	LCD_direction(USE_HORIZONTAL);//设置LCD显示方向 
}
 
/*****************************************************************************
 * @name       :void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
 * @function   :Setting LCD display window         设置LCD显示窗口
 * @parameters :xStar:the bebinning x coordinate of the LCD display window
								yStar:the bebinning y coordinate of the LCD display window
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
****************************************************** Ruifeng   2020-3-21   OK******/ 
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{	
	LCD_WR_REG(lcddev.setxcmd);	
	LCD_WR_DATA(xStar>>8);
	LCD_WR_DATA(0x00FF&xStar);		
	LCD_WR_DATA(xEnd>>8);
	LCD_WR_DATA(0x00FF&xEnd);

	LCD_WR_REG(lcddev.setycmd);	
	LCD_WR_DATA(yStar>>8);
	LCD_WR_DATA(0x00FF&yStar);		
	LCD_WR_DATA(yEnd>>8);
	LCD_WR_DATA(0x00FF&yEnd);	

	LCD_WriteRAM_Prepare();	//开始写入GRAM				
}   

/*****************************************************************************
 * @name       :void LCD_SetCursor(u16 Xpos, u16 Ypos)
 * @function   :Set coordinate value             设置像素座标
 * @parameters :Xpos:the  x coordinate of the pixel
				Ypos:the  y coordinate of the pixel   Ruifeng   2020-3-21   OK
******************************************************************************/ 
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{	  	    			
	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);	
} 

/*****************************************************************************
 * @name       :void LCD_direction(u8 direction)       Ruifeng   2020-3-21   OK
 * @function   :Setting the display direction of LCD screen  设置LCD 显示方向
 * @parameters :direction:0-0 degree 1-90 degree   2-180 degree  3-270 degree
******************************************************************************/ 
void LCD_direction(u8 direction)
{ 
	lcddev.setxcmd=0x2A;
	lcddev.setycmd=0x2B;
	lcddev.wramcmd=0x2C;
	lcddev.rramcmd=0x2E;
	switch(direction)
	{		  
		case 0:{						 	 		
			lcddev.width=LCD_W;
			lcddev.height=LCD_H;		
			LCD_WriteReg(0x36,(1<<6)|(1<<3));//0 degree MY=0,MX=0,MV=0,ML=0,BGR=1,MH=0
		    }break;
			
		case 1:{
			lcddev.width=LCD_H;
			lcddev.height=LCD_W;
			LCD_WriteReg(0x36,(1<<3)|(1<<4)|(1<<5));//90 degree MY=0,MX=1,MV=1,ML=1,BGR=1,MH=0
		    }break;
			
		case 2:{					 	 		
			lcddev.width=LCD_W;
			lcddev.height=LCD_H;	
			LCD_WriteReg(0x36,(1<<3)|(1<<7));//180 degree MY=1,MX=1,MV=0,ML=0,BGR=1,MH=0
		    }break;
			
		case 3:{
			lcddev.width=LCD_H;
			lcddev.height=LCD_W;
			LCD_WriteReg(0x36,(1<<3)|(1<<5)|(1<<6)|(1<<7));//270 degree MY=1,MX=0,MV=1,ML=0,BGR=1,MH=0
		    }break;	
			
		default:break;
	}		
}	 

/************************ LCD填充指定区域*********************************/
void LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 color)
{  	
	u16 i,j;			
	u16 width=ex-sx+1; 		//得到填充的宽度
	u16 height=ey-sy+1;		//高度
	LCD_SetWindows(sx,sy,ex,ey);//设置显示窗口
	for(i=0;i<height;i++)
	{
		for(j=0;j<width;j++)
		LCD_WR_DATA_16Bit(color);	//写入数据 	 
	}
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//恢复窗口设置为全屏
}


/*****************************************************************************
 * @name       :void LCD_ShowChar(u16 x,u16 y,u16 fc, u16 bc, u8 num,u8 size,u8 mode)
 * @function   :Display a single English character
 * @parameters :x:the bebinning x coordinate of the Character display position
                y:the bebinning y coordinate of the Character display position
								fc:the color value of display character
								bc:the background color of display character
								num:the ascii code of display character(0~94)
								size:the size of display character
								mode:0-no overlying,1-overlying
******************************************************************************/ 
void LCD_ShowChar(u16 x,u16 y,u16 fc, u16 bc, u8 num,u8 size,u8 mode)
{  
    u8 temp;
    u8 pos,t;
	u16 colortemp=POINT_COLOR;        
	num=num-' ';//得到偏移后的值
	LCD_SetWindows(x,y,x+size/2-1,y+size-1);//设置单个文字显示窗口
	
	if(!mode) //非叠加方式
	{
		for(pos=0;pos<size;pos++)
		{
			//if(size==12)temp=asc2_1206[num][pos];//调用1206字体
			temp=FontEN32[num][32+pos];		 //调用1608字体
			
			for(t=0;t<8;t++)
		    {                 
		        if(temp&0x01)LCD_WR_DATA_16Bit(fc); 
				else LCD_WR_DATA_16Bit(bc); 
				temp>>=1; 
		    }
		}
		for(pos=0;pos<size;pos++)
		{
			//if(size==12)temp=asc2_1206[num][pos];//调用1206字体
			temp=FontEN32[num][pos];		 //调用1608字体
			
			for(t=0;t<8;t++)
		    {                 
		        if(temp&0x01)LCD_WR_DATA_16Bit(fc); 
				else LCD_WR_DATA_16Bit(bc); 
				temp>>=1; 
		    }
		}	

		
	}
	else//叠加方式
	{
			for(pos=0;pos<size;pos++)
		{
			//if(size==12)temp=asc2_1206[num][pos];//调用1206字体
			temp=FontEN32[num][32+pos];		 //调用1608字体
			for(t=0;t<size/2;t++)
		    {   
				POINT_COLOR=fc;              
		        if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//画一个点    
		        temp>>=1; 
		    }
		}	
		for(pos=0;pos<size;pos++)
		{
			//if(size==12)temp=asc2_1206[num][pos];//调用1206字体
			temp=FontEN32[num][pos];		 //调用1608字体
			for(t=0;t<size/2;t++)
		    {   
				POINT_COLOR=fc;              
		        if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//画一个点    
		        temp>>=1; 
		    }
		}

	}
	POINT_COLOR=colortemp;	
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//恢复窗口为全屏    	   	 	  
}

/********************显示英文字符串****************************************/
void LCD_ShowString(u16 x,u16 y,u8 size,u8 *p,u8 mode)
{         
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
    {   
		if(x>(lcddev.width-1)||y>(lcddev.height-1)) 
		return;     
        LCD_ShowChar(x,y,POINT_COLOR,BACK_COLOR,*p,size,mode);
        x+=size/2;
        p++;
    }  
}


/*****************************************************************************
 * @name       :void GUI_DrawFont16(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
 * @function   :Display a single 16x16 Chinese character
 * @parameters :x:the bebinning x coordinate of the Chinese character
                y:the bebinning y coordinate of the Chinese character
								fc:the color value of Chinese character
								bc:the background color of Chinese character
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
******************************************************************************/ 
void GUI_DrawFont16(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
	HZnum=sizeof(tfont16)/sizeof(typFNT_GB16);	//自动统计汉字数目
			
	for (k=0;k<HZnum;k++) 
	{
	  if ((tfont16[k].Index[0]==*(s))&&(tfont16[k].Index[1]==*(s+1)))
	  { 	LCD_SetWindows(x,y,x+16-1,y+16-1);
		    for(i=0;i<16*2;i++)
		    {
				for(j=0;j<8;j++)
		    	{	
					if(!mode) //非叠加方式
					{
						if(tfont16[k].Msk[i]&(0x80>>j))	LCD_WR_DATA_16Bit(fc);
						else LCD_WR_DATA_16Bit(bc);
					}
					else
					{
						POINT_COLOR=fc;
						if(tfont16[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//画一个点
						x++;
						if((x-x0)==16)
						{
							x=x0;
							y++;
							break;
						}
					}
				}
			}
		}				  	
		continue;  //查找到对应点阵字库立即退出，防止多个汉字重复取模带来影响
	}
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//恢复窗口为全屏  
}

void GUI_DrawFont24(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
	HZnum=sizeof(tfont24)/sizeof(typFNT_GB24);	//自动统计汉字数目
	for (k=0;k<HZnum;k++) 
	{
		if ((tfont24[k].Index[0]==*(s))&&(tfont24[k].Index[1]==*(s+1)))
		{ 	LCD_SetWindows(x,y,x+24-1,y+24-1);
			for(i=0;i<24*3;i++)
			  {
				for(j=0;j<8;j++)
				{
				  if(!mode) //非叠加方式  0
					{
					  if(tfont24[k].Msk[i]&(0x80>>j))	LCD_WR_DATA_16Bit(fc);
					  else LCD_WR_DATA_16Bit(bc);
					}
				  else
					{
					  POINT_COLOR=fc;
					  if(tfont24[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//画一个点
					  x++;
					  if((x-x0)==24)
						{
						  x=x0;
						  y++;
						  break;
						}
					 }
				}
			}
		}				  	
        continue;  //查找到对应点阵字库立即退出，防止多个汉字重复取模带来影响
	}
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//恢复窗口为全屏  
 }

 
void GUI_DrawFont32(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
	HZnum=sizeof(tfont32)/sizeof(typFNT_GB32);	//自动统计汉字数目
	for (k=0;k<HZnum;k++) 
			{
			  if ((tfont32[k].Index[0]==*(s))&&(tfont32[k].Index[1]==*(s+1)))
			  { 	LCD_SetWindows(x,y,x+32-1,y+32-1);
				    for(i=0;i<32*4;i++)
				    {
						for(j=0;j<8;j++)
				    	{
							if(!mode) //非叠加方式
							{
								if(tfont32[k].Msk[i]&(0x80>>j))	LCD_WR_DATA_16Bit(fc);
								else LCD_WR_DATA_16Bit(bc);
							}
							else
							{
								POINT_COLOR=fc;
								if(tfont32[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//画一个点
								x++;
								if((x-x0)==32)
								{
									x=x0;
									y++;
									break;
								}
							}
						}
					}
				}				  	
				continue;  //查找到对应点阵字库立即退出，防止多个汉字重复取模带来影响
			}
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//恢复窗口为全屏  
} 

/*****************************************************************************
 * @name       :void Show_Str(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
 * @date       :2018-08-09 
 * @function   :Display Chinese and English strings
 * @parameters :x:the bebinning x coordinate of the Chinese and English strings
                y:the bebinning y coordinate of the Chinese and English strings
								fc:the color value of Chinese and English strings
								bc:the background color of Chinese and English strings
								str:the start address of the Chinese and English strings
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/	   		   
void Show_Str(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{					
	u16 x0=x;							  	  
  	u8 bHz=0;     //字符或者中文 
    while(*str!=0)//数据未结束
    { 
        if(!bHz) //英文
        {
			if(x>(lcddev.width-size/2)||y>(lcddev.height-size)) return; 
	        if(*str>0x80)bHz=1;//中文 
	        else              //字符
	         {          
		        if(*str==0x0D)//换行符号
		        {         
		            y+=size;
					x=x0;
		            str++; 
		        }  
		        else
				{
					LCD_ShowChar(x,y,fc,bc,*str,size,mode);
					x+=size/2;  //x+=8; //字符,为全字的一半 
				} 
				str++; 
	         }
        }
		
		else//中文 
        {   
			if(x>(lcddev.width-size)||y>(lcddev.height-size)) 
			return;  
            bHz=0; //有汉字库  
			if(size==32)
			GUI_DrawFont32(x,y,fc,bc,str,mode);	 	
			else if(size==24)
			GUI_DrawFont24(x,y,fc,bc,str,mode);	
			else
			GUI_DrawFont16(x,y,fc,bc,str,mode);
	        str+=2; 
	        x+=size;//下一个汉字偏移	    
        }						 
    }    
}

/*****************在指定位置画一个点*****************************/
void GUI_DrawPoint(u16 x,u16 y,u16 color)
{
	LCD_SetCursor(x,y);//设置光标位置 
	LCD_WR_DATA_16Bit(color); 
}

/******************两点之间画一条线 *******************************/
void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
{
	u16 t; 
	int xerr=0,yerr=0,delta_x,delta_y,distance; 
	int incx,incy,uRow,uCol; 

	delta_x=x2-x1; //计算坐标增量 
	delta_y=y2-y1; 
	uRow=x1; 
	uCol=y1; 
	if(delta_x>0)incx=1; //设置单步方向 
	else if(delta_x==0)incx=0;//垂直线 
	else {incx=-1;delta_x=-delta_x;} 
	if(delta_y>0)incy=1; 
	else if(delta_y==0)incy=0;//水平线 
	else{incy=-1;delta_y=-delta_y;} 
	if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
	else distance=delta_y; 
	for(t=0;t<=distance+1;t++ )//画线输出 
	{   LCD_WR_DATA_16Bit(YELLOW);  //颜色 
		LCD_DrawPoint(uRow,uCol);//画点 
		xerr+=delta_x ; 
		yerr+=delta_y ; 
		if(xerr>distance) 
		{ 
			xerr-=distance; 
			uRow+=incx; 
		} 
		if(yerr>distance) 
		{ 
			yerr-=distance; 
			uCol+=incy; 
		} 
	}  
} 

//**************************指定点画一个矩形***************************/
void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2)
{
	LCD_DrawLine(x1,y1,x2,y1);
	LCD_DrawLine(x1,y1,x1,y2);
	LCD_DrawLine(x1,y2,x2,y2);
	LCD_DrawLine(x2,y1,x2,y2);
}

//**************************指定点画填充一个矩形***************************/
void LCD_DrawFillRectangle(u16 x1, u16 y1, u16 x2, u16 y2)
{
	LCD_Fill(x1,y1,x2,y2,POINT_COLOR);

}

//**************************对称圆绘制***************************/
void _draw_circle_8(int xc, int yc, int x, int y, u16 c)
{
	GUI_DrawPoint(xc + x, yc + y, c);

	GUI_DrawPoint(xc - x, yc + y, c);

	GUI_DrawPoint(xc + x, yc - y, c);

	GUI_DrawPoint(xc - x, yc - y, c);

	GUI_DrawPoint(xc + y, yc + x, c);

	GUI_DrawPoint(xc - y, yc + x, c);

	GUI_DrawPoint(xc + y, yc - x, c);

	GUI_DrawPoint(xc - y, yc - x, c);
}

//**************************绘制指定大小的圆***************************/
void gui_circle(int xc, int yc,u16 c,int r, int fill)
{
	int x = 0, y = r, yi, d;

	d = 3 - 2 * r;


	if (fill) 
	{
		// 如果填充（画实心圆）
		while (x <= y) {
			for (yi = x; yi <= y; yi++)
				_draw_circle_8(xc, yc, x, yi, c);

			if (d < 0) {
				d = d + 4 * x + 6;
			} else {
				d = d + 4 * (x - y) + 10;
				y--;
			}
			x++;
		}
	} else 
	{
		// 如果不填充（画空心圆）
		while (x <= y) {
			_draw_circle_8(xc, yc, x, y, c);
			if (d < 0) {
				d = d + 4 * x + 6;
			} else {
				d = d + 4 * (x - y) + 10;
				y--;
			}
			x++;
		}
	}
}

//**************************绘制三角形（三角形填充不支持）*******************/
void Draw_Triangel(u16 x0,u16 y0,u16 x1,u16 y1,u16 x2,u16 y2)
{
	LCD_DrawLine(x0,y0,x1,y1);
	LCD_DrawLine(x1,y1,x2,y2);
	LCD_DrawLine(x2,y2,x0,y0);
}

//********************取N次幂*******************/
u32 mypow(u8 m,u8 n)
{
	u32 result=1;	 
	while(n--)result*=m;    
	return result;
}

//********************显示数字 (0~4294967295)*******************/
void LCD_ShowNum(u16 x,u16 y,u32 num,u8 len,u8 size)
{         	
	u8 t,temp;
	u8 enshow=0;						   
	for(t=0;t<len;t++)
	{
		temp=(num/mypow(10,len-t-1))%10;
		if(enshow==0&&t<(len-1))
		{
			if(temp==0)
			{
				LCD_ShowChar(x+(size/2)*t,y,POINT_COLOR,BACK_COLOR,' ',size,0);
				continue;
			}else enshow=1; 
		 	 
		}
	 	LCD_ShowChar(x+(size/2)*t,y,POINT_COLOR,BACK_COLOR,temp+'0',size,0); 
	}
}

//********************显示16位图像*******************/
void Gui_Drawbmp16(u16 x,u16 y,const unsigned char *p) //显示40*40 QQ图片
{
  	int i; 
	unsigned char picH,picL; 
	LCD_SetWindows(x,y,x+40-1,y+40-1);//窗口设置
    for(i=0;i<40*40;i++)
	{	
	 	picL=*(p+i*2);	//数据低位在前
		picH=*(p+i*2+1);				
		LCD_WR_DATA_16Bit(picH<<8|picL);  						
	}	
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//恢复显示窗口为全屏	
}

/*********************居中显示中文/英文字符********************************/ 
void Gui_StrCenter(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{
	u16 len=strlen((const char *)str);
	u16 x1=(lcddev.width-len*8)/2;
	Show_Str(x+x1,y,fc,bc,str,size,mode);
} 


void ENFont32(u16 x, u16 y, u16 fc, u16 bc, u8 Ft,u8 mode)
{
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
	LCD_SetWindows(x,y,x+32-1,y+32-1);
	for(i=0;i<32*2;i++)  //32*16字符
	{ //3
	  for(j=0;j<8;j++)
		{
		  POINT_COLOR=fc;
		  if(FontEN32[Ft][i]&(0x80>>j))	LCD_DrawPoint(x,y);//画一个点
		  else LCD_WR_DATA_16Bit(bc);
		  x++;
		  if((x-x0)==16)
		  {
			x=x0;
			y++;
			break;
		  }
		}
   } //3			  	
   LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//恢复窗口为全屏  
} 	

void ENFont48(u16 x, u16 y, u16 fc, u16 bc, u8 Ft,u8 mode)
{
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
	//LCD_SetWindows(x,y,x+48-1,y+48-1);
	 LCD_Fill(x,y,x+48-1,y+48-1,BLACK);
	for(i=0;i<48*3;i++)  //32*16字符
	{ //3
	  for(j=0;j<8;j++)
		{
		  POINT_COLOR=fc;
		  if(ENFONT48_24[Ft][i]&(0x80>>j))	LCD_DrawPoint(x,y);//画一个点
		  else LCD_WR_DATA_16Bit(bc);
		  x++;
		  if((x-x0)==24)
		  {
			x=x0;
			y++;
			break;
		  }
		}
   } //3			  	
  // LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//恢复窗口为全屏  
} 	


void ENFont64(u16 x, u16 y, u16 fc, u16 bc, u8 Ft,u8 mode)
{
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
	//LCD_SetWindows(x,y,x+48-1,y+48-1);
	LCD_Fill(x,y,x+64-1,y+64-1,BLACK);
	for(i=0;i<63*4;i++)  //32*16字符
	{ //3
	  for(j=0;j<8;j++)
		{
		 POINT_COLOR=fc;
		  if(ENFONT64_32[Ft][i]&(0x80>>j))	LCD_DrawPoint(x,y);//画一个点
		  else LCD_WR_DATA_16Bit(bc);
		  x++;
		  if((x-x0)==32)
		  {
			x=x0;
			y++;
			break;
		  }
		}
   } //3			  	
  // LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//恢复窗口为全屏  
} 

void CNFont40(u16 x, u16 y, u16 fc, u16 bc, u8 Ft,u8 mode)
{
	u8 j,i;
	u16 k;
	u16 HZnum;
	u16 x0=x;
	//LCD_SetWindows(x,y,x+48-1,y+48-1);
	LCD_Fill(x,y,x+40-1,y+40-1,BLACK);
	for(i=0;i<40*5;i++)  //32*16字符
	{ //3
	  for(j=0;j<8;j++)
		{
		 POINT_COLOR=fc;
		  if(FontCN48[Ft][i]&(0x80>>j))	LCD_DrawPoint(x,y);//画一个点
		  else LCD_WR_DATA_16Bit(bc);
		  x++;
		  if((x-x0)==40)
		  {
			x=x0;
			y++;
			break;
		  }
		}
   } //3			  	
  // LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//恢复窗口为全屏  
}

void ICO_64(u16 x, u16 y, u16 fc, u16 bc, u8 Ft,u8 mode)  //OK
{
	u8 j;
	u16 k,i;
	u16 HZnum;
	u16 x0=x;
	//LCD_SetWindows(x,y,x+48-1,y+48-1);
	LCD_Fill(x,y,x+64-1,y+64-1,BLACK);
	for(i=0;i<64*8;i++)  //32*16字符
	{ //3
	  for(j=0;j<8;j++)
		{
		 POINT_COLOR=fc;
		  if(ico_80[i]&(0x80>>j))	LCD_DrawPoint(x,y);//画一个点
		  else LCD_WR_DATA_16Bit(bc);
		  x++;
		  if((x-x0)==64)
		  {
			x=x0;
			y++;
			break;
		  }
		}
   } //3			  	
  // LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//恢复窗口为全屏  
} 

void ICO_80(u16 x, u16 y, u16 fc, u16 bc,const unsigned char *p,u8 mode)  //OK
{
	u8 j;
	u16 k,i;
	u16 HZnum;
	u16 x0=x;
	//LCD_SetWindows(x,y,x+48-1,y+48-1);
	LCD_Fill(x,y,x+80-1,y+80-1,BLACK);
	for(i=0;i<80*10;i++)  //32*16字符
	{ //3
	  for(j=0;j<8;j++)
		{
		 POINT_COLOR=fc;
		  if(*p&(0x80>>j))	LCD_DrawPoint(x,y);//画一个点
		  else LCD_WR_DATA_16Bit(bc);
		  x++;
		  if((x-x0)==80)
		  {
			x=x0;
			y++;
			break;
		  }
		}
		p++;
   } //3			  	
  // LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//恢复窗口为全屏  
} 
